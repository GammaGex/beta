<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GEX Dashboard v26</title>
    <!-- Chart.js e dependÃªncias -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/2.2.1/chartjs-plugin-annotation.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/2.0.1/chartjs-plugin-zoom.min.js"></script>

    <style>
        :root {
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --text-primary: #e0e0e0;
            --text-secondary: #aaa;
            --border-color: #333;
            --accent-blue: #0d8eff;
            --positive-color: #28a745;
            --negative-color: #dc3545;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 15px;
            height: calc(100vh - 30px);
            box-sizing: border-box;
        }

        .dashboard-layout {
            display: flex;
            gap: 15px;
            align-items: stretch;
            height: 100%;
        }

        .main-content {
            flex-grow: 1;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .sidebar {
            flex: 0 0 300px;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 15px 20px;
            display: flex;
            flex-direction: column;
            max-height: 100%;
            overflow-y: auto;
        }

        h3 {
            text-align: left;
            font-size: 1em;
            color: var(--text-secondary);
            text-transform: uppercase;
            border-bottom: 1px solid var(--border-color);
            margin-top: 15px;
            margin-bottom: 10px;
            padding-bottom: 5px;
            font-weight: 500;
        }

        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        .sidebar-header h1 {
            font-size: 1.4em;
            margin: 0;
            color: var(--text-primary);
        }

        .sidebar .control-group { margin-top: 15px; }
        .sidebar label {
            display: block;
            margin-bottom: 8px;
            font-size: 0.85em;
            color: var(--text-secondary);
            text-transform: uppercase;
        }
        .sidebar select {
            width: 100%;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #555;
            background-color: var(--border-color);
            color: var(--text-primary);
            box-sizing: border-box;
            font-size: 0.95em;
        }
        
        .sidebar .date-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .sidebar .date-buttons button {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: #2a2a2a;
            color: var(--text-primary);
            cursor: pointer;
            text-align: left;
            transition: background-color 0.3s, border-color 0.3s;
            font-size: 0.95em;
        }
        .sidebar .date-buttons button.active, 
        .sidebar .date-buttons button:hover {
            background-color: var(--accent-blue);
            border-color: var(--accent-blue);
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            padding: 3px 0;
            font-size: 0.9em;
        }
        .info-item .label { color: var(--text-secondary); }
        .info-item .value { font-weight: bold; }
        .positive { color: var(--positive-color); }
        .negative { color: var(--negative-color); }
        
        #status { text-align: center; margin-top: 20px; font-style: italic; color: #888; }
        
        #charts-container {
            flex-grow: 1;
            position: relative;
        }
        .chart-container { 
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0; 
        }
        
        @media (max-width: 900px) {
            body { height: auto; }
            .dashboard-layout { flex-direction: column-reverse; }
            .sidebar { flex: 0 0 auto; width: 100%; box-sizing: border-box; }
            .main-content { min-height: 500px; }
        }
    </style>
</head>
<body>

    <div class="dashboard-layout">
        <main class="main-content">
            <div id="charts-container" style="display:none;">
                <div class="chart-container" id="chartContainer">
                    <canvas id="gexChart"></canvas>
                </div>
            </div>
        </main>
        <aside class="sidebar">
            <div>
                <div class="sidebar-header">
                    <h1>GEX BETA</h1>
                </div>

                <div class="control-group">
                    <label for="tickerSelect">Ticker</label>
                    <select id="tickerSelect">
                        <option value="SPX">SPX</option>
                        <option value="ES_SPX">ES_SPX</option>
                        <option value="NDX">NDX</option>
                        <option value="NQ_NDX">NQ_NDX</option>
                        <option value="QQQ">QQQ</option>
                        <option value="SPY">SPY</option>
                    </select>
                </div>

                <div class="control-group date-buttons">
                    <button data-period="full">90d (agg)</button>
                    <button data-period="zero" class="active">latest (0DTE)</button>
                    <button data-period="one">next (1DTE)</button>
                </div>
                
                <div id="status">Carregando dados...</div>
                
                <div id="sidebar-info" style="display:none;">
                    <h3>Update</h3>
                    <div class="info-item"><span class="label">Data API</span><span class="value" id="timestamp_date">-</span></div>
                    <div class="info-item"><span class="label">Spot</span><span class="value" id="spot_price">-</span></div>

                    <h3>Volume</h3>
                    <div class="info-item"><span class="label">Zero Gamma</span><span class="value" id="zero_gamma">-</span></div>
                    <div class="info-item"><span class="label">Major Positive</span><span class="value positive" id="mpos_vol">-</span></div>
                    <div class="info-item"><span class="label">Major Negative</span><span class="value negative" id="mneg_vol">-</span></div>
                    <div class="info-item"><span class="label">Net GEX</span><span class="value" id="net_gex_vol">-</span></div>
                    
                    <h3>Open Interest</h3>
                    <div class="info-item"><span class="label">Major Positive</span><span class="value positive" id="mpos_oi">-</span></div>
                    <div class="info-item"><span class="label">Major Negative</span><span class="value negative" id="mneg_oi">-</span></div>
                    <div class="info-item"><span class="label">Net GEX</span><span class="value" id="net_gex_oi">-</span></div>

                    <h3>Max Change GEX</h3>
                    <div id="maxChangeList"></div>
                </div>
            </div>
        </aside>
    </div>

    <script>
        const apiKey = "dGkuGvazaESI"; 

        const tickerSelect = document.getElementById('tickerSelect');
        const periodButtons = document.querySelector('.date-buttons');
        const statusEl = document.getElementById('status');
        const sidebarInfoEl = document.getElementById('sidebar-info');
        const chartsContainerEl = document.getElementById('charts-container');
        
        let currentPeriod = 'zero';
        let myGexChart = null;
        let updateInterval = null;
        
        function formatNumber(num, fractionDigits = 2) {
            if (typeof num !== 'number') return '-';
            return num.toLocaleString('pt-BR', { minimumFractionDigits: fractionDigits, maximumFractionDigits: fractionDigits });
        }
        function formatBillions(num) {
            if (typeof num !== 'number') return '-';
            const value = (num / 1e9);
            return `${value.toFixed(4)}Bn`;
        }
        function setStatus(message, isLoading = false) {
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            if (isLoading) {
                sidebarInfoEl.style.display = 'none';
                chartsContainerEl.style.display = 'none';
            } else if (!message) {
                 statusEl.style.display = 'none';
                 sidebarInfoEl.style.display = 'block';
                 chartsContainerEl.style.display = 'block';
            }
        }
        
        function createProxiedUrl(targetUrl) {
            return `https://api.codetabs.com/v1/proxy/?quest=${targetUrl}`;
        }

        async function fetchAndParseProxied(proxiedUrl) {
            const response = await fetch(proxiedUrl);
            if (!response.ok) {
                 throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);
            }
            return response.json();
        }

        async function runUpdate(isSilent = false) {
            const ticker = tickerSelect.value;
            if (!ticker) {
                setStatus("Por favor, selecione um ticker.", true);
                return;
            }
            if (!isSilent) {
                setStatus(`Carregando dados para ${ticker.toUpperCase()}...`, true);
            }

            const baseApiUrl = `https://api.gexbot.com/${ticker.toUpperCase()}/classic/${currentPeriod}`;
            const fullChainUrl = createProxiedUrl(`${baseApiUrl}?key=${apiKey}`);

            try {
                const fullData = await fetchAndParseProxied(fullChainUrl);
                
                updateSidebar(fullData);
                drawGexProfileChart(fullData); 
                
                if (!isSilent) {
                    setStatus(null);
                }

            } catch (error) {
                console.error("Falha ao atualizar dados:", error);
                if (!isSilent) {
                    setStatus(`Erro ao carregar: ${error.message}.`, true);
                }
            }
        }
        
        function updateSidebar(data) {
            const date = new Date(data.timestamp * 1000); 
            document.getElementById('timestamp_date').textContent = date.toLocaleDateString('pt-BR');

            document.getElementById('spot_price').textContent = formatNumber(data.spot, 2);
            document.getElementById('zero_gamma').textContent = formatNumber(data.zero_gamma, 2);
            
            document.getElementById('mpos_vol').textContent = formatNumber(data.major_pos_vol, 2);
            document.getElementById('mneg_vol').textContent = formatNumber(data.major_neg_vol, 2);
            const netGexVolEl = document.getElementById('net_gex_vol');
            netGexVolEl.textContent = formatBillions(data.sum_gex_vol);
            if (typeof data.sum_gex_vol === 'number') {
                netGexVolEl.className = `value ${data.sum_gex_vol > 0 ? 'positive' : 'negative'}`;
            }

            document.getElementById('mpos_oi').textContent = formatNumber(data.major_pos_oi, 2);
            document.getElementById('mneg_oi').textContent = formatNumber(data.major_neg_oi, 2);
            const netGexOiEl = document.getElementById('net_gex_oi');
            netGexOiEl.textContent = formatBillions(data.sum_gex_oi);
            if (typeof data.sum_gex_oi === 'number') {
                 netGexOiEl.className = `value ${data.sum_gex_oi > 0 ? 'positive' : 'negative'}`;
            }

            const maxChangeListEl = document.getElementById("maxChangeList");
            maxChangeListEl.innerHTML = '';
            const intervals = ['1m', '5m', '10m', '15m', '30m'];
            if(data.max_priors && Array.isArray(data.max_priors)){
                data.max_priors.slice(1).forEach((changeData, index) => { 
                    if (changeData) {
                        const valueClass = changeData[1] > 0 ? 'positive' : 'negative';
                        maxChangeListEl.innerHTML += `
                            <div class="info-item">
                                <span class="label">${intervals[index + 1]}</span>
                                <span class="value">${formatNumber(changeData[0])} <span class="${valueClass}">${formatBillions(changeData[1])}</span></span>
                            </div>`;
                    }
                });
            }
        }

        function drawGexProfileChart(fullData) {
            const chartData = fullData.strikes.map(s => ({ x: s[1], y: s[0] }));
            const xValues = chartData.map(d => d.x);
            const maxAbsValue = Math.max(...xValues.map(v => Math.abs(v)));
            const padding = maxAbsValue * 0.1;
            const axisLimit = maxAbsValue + padding;
            
            const ticker = fullData.ticker;
            let yStepSize = 25;
            if (['QQQ', 'SPY'].includes(ticker)) {
                yStepSize = 1;
            }
            
            const datasets = [{
                label: 'GEX Atual (Vol)',
                data: chartData,
                backgroundColor: (c) => c.raw.x >= 0 ? 'rgba(40, 167, 69, 0.7)' : 'rgba(220, 53, 69, 0.7)',
                borderColor: (c) => c.raw.x >= 0 ? 'rgb(40, 167, 69)' : 'rgb(220, 53, 69)',
                borderWidth: 1, 
                barPercentage: 1.0, 
                categoryPercentage: 1.0,
            }];

            const annotationOptions = {
                zero_gamma_line: { type: 'line', yMin: fullData.zero_gamma, yMax: fullData.zero_gamma, borderColor: '#f0b90b', borderWidth: 2, label: { content: `${formatNumber(fullData.zero_gamma, 2)}`, enabled: true, position: 'end', backgroundColor: 'rgba(240, 185, 11, 0.8)', color: '#000', font: { weight: 'bold' } } },
                major_pos_vol_line: { type: 'line', yMin: fullData.major_pos_vol, yMax: fullData.major_pos_vol, borderColor: '#28a745', borderWidth: 2, borderDash: [6, 6], label: { content: `${formatNumber(fullData.major_pos_vol, 2)}`, enabled: true, position: 'start', backgroundColor: 'rgba(40, 167, 69, 0.8)', font: { weight: 'bold' } } },
                major_neg_vol_line: { type: 'line', yMin: fullData.major_neg_vol, yMax: fullData.major_neg_vol, borderColor: '#dc3545', borderWidth: 2, borderDash: [6, 6], label: { content: `${formatNumber(fullData.major_neg_vol, 2)}`, enabled: true, position: 'start', backgroundColor: 'rgba(220, 53, 69, 0.8)', font: { weight: 'bold' } } },
                spot_line: { type: 'line', yMin: fullData.spot, yMax: fullData.spot, borderColor: '#FFFFFF', borderWidth: 1.5 }
            };

            if (myGexChart) {
                myGexChart.data.datasets = datasets;
                myGexChart.options.scales.x.min = -axisLimit;
                myGexChart.options.scales.x.max = axisLimit;
                myGexChart.options.scales.y.ticks.stepSize = yStepSize;
                myGexChart.options.plugins.annotation.annotations = annotationOptions;
                myGexChart.update('none'); 
            } else {
                const ctx = document.getElementById('gexChart').getContext('2d');
                myGexChart = new Chart(ctx, {
                    type: 'bar',
                    data: { datasets: datasets },
                    options: {
                        indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                        animation: {
                            duration: 0 
                        },
                        scales: {
                            x: { 
                                position: 'top', 
                                ticks: { color: '#FFFFFF' }, 
                                grid: { color: 'rgba(255, 255, 255, 0.1)' },
                                min: -axisLimit,
                                max: axisLimit
                            },
                            y: { 
                                type: 'linear', 
                                ticks: { color: '#FFFFFF', stepSize: yStepSize }, 
                                grid: { color: 'rgba(255, 255, 255, 0.1)' } 
                            }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    title: function(tooltipItems) {
                                        if (tooltipItems.length > 0) {
                                            return `Strike: ${formatNumber(tooltipItems[0].parsed.y)}`;
                                        }
                                        return '';
                                    },
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.x !== null) {
                                            label += `GEX ${formatNumber(context.parsed.x, 0)}`;
                                        }
                                        return label;
                                    }
                                }
                            },
                            annotation: {
                                annotations: annotationOptions
                            },
                            zoom: {
                                pan: {
                                    enabled: false, // Desativa o arraste (pan)
                                },
                                zoom: {
                                    wheel: {
                                        enabled: false, // Desativa o zoom com a roda do rato
                                    },
                                    pinch: {
                                        enabled: false // Desativa o zoom em ecrÃ£s tÃ¡teis
                                    },
                                }
                            }
                        }
                    }
                });
            }
        }
        
        function startAutoUpdate() {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
            updateInterval = setInterval(() => runUpdate(true), 5000); 
        }

        periodButtons.addEventListener('click', (e) => {
            if (e.target.tagName === 'BUTTON' && !e.target.classList.contains('active')) {
                document.querySelector('.date-buttons button.active').classList.remove('active');
                e.target.classList.add('active');
                currentPeriod = e.target.dataset.period;
                runUpdate();
            }
        });

        tickerSelect.addEventListener('change', runUpdate);
        
        window.addEventListener('load', () => {
            runUpdate(); 
            startAutoUpdate();
        });
    </script>
</body>
</html>
