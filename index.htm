<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GEX Dashboard v9</title>
    <!-- Chart.js e dependÃªncias -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/2.2.1/chartjs-plugin-annotation.min.js"></script>

    <style>
        :root {
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --text-primary: #e0e0e0;
            --text-secondary: #aaa;
            --border-color: #333;
            --accent-blue: #0d8eff;
            --positive-color: #28a745;
            --negative-color: #dc3545;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            margin: 0;
            padding: 15px;
            height: calc(100vh - 30px);
            box-sizing: border-box;
        }

        .dashboard-layout {
            display: flex;
            gap: 15px;
            align-items: stretch;
            height: 100%;
        }

        .main-content {
            flex-grow: 1;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .sidebar {
            flex: 0 0 300px;
            background-color: var(--bg-secondary);
            border-radius: 8px;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        h3 {
            text-align: left;
            font-size: 1.1em;
            color: var(--text-secondary);
            text-transform: uppercase;
            border-bottom: 1px solid var(--border-color);
            margin-top: 20px;
            margin-bottom: 15px;
            font-weight: 500;
        }

        /* --- Estilos do Menu Lateral --- */
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }
        .sidebar-header h1 {
            font-size: 1.4em;
            margin: 0;
            color: var(--text-primary);
        }
        .header-icons { display: flex; gap: 15px; }
        .header-icons svg { fill: var(--text-secondary); width: 20px; height: 20px; }

        .sidebar .control-group { margin-top: 20px; }
        .sidebar label {
            display: block;
            margin-bottom: 8px;
            font-size: 0.9em;
            color: var(--text-secondary);
            text-transform: uppercase;
        }
        .sidebar input[type="text"] {
            width: 100%;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #555;
            background-color: var(--border-color);
            color: var(--text-primary);
            box-sizing: border-box;
            font-size: 1em;
        }
        
        .sidebar .date-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .sidebar .date-buttons button {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: #2a2a2a;
            color: var(--text-primary);
            cursor: pointer;
            text-align: left;
            transition: background-color 0.3s, border-color 0.3s;
            font-size: 1em;
        }
        .sidebar .date-buttons button.active, .sidebar .date-buttons button:hover {
            background-color: var(--accent-blue);
            border-color: var(--accent-blue);
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            padding: 6px 0;
            font-size: 0.95em;
        }
        .info-item .label { color: var(--text-secondary); }
        .info-item .value { font-weight: bold; }
        .positive { color: var(--positive-color); }
        .negative { color: var(--negative-color); }
        
        .sidebar-footer {
            margin-top: auto;
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .playback-controls { display: flex; gap: 15px; align-items: center; }
        .playback-controls svg { fill: var(--text-secondary); width: 22px; height: 22px; cursor: pointer; }
        .playback-controls svg:hover { fill: var(--text-primary); }

        #status { text-align: center; margin-top: 20px; font-style: italic; color: #888; }
        
        #charts-container {
            flex-grow: 1;
            position: relative;
        }
        .chart-container { 
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        @media (max-width: 900px) {
            body { height: auto; }
            .dashboard-layout { flex-direction: column-reverse; }
            .sidebar { flex: 0 0 auto; width: 100%; box-sizing: border-box; }
            .main-content { min-height: 500px; }
        }
    </style>
</head>
<body>

    <div class="dashboard-layout">
        <main class="main-content">
            <div id="charts-container" style="display:none;">
                <div class="chart-container" id="chartContainer">
                    <canvas id="gexChart"></canvas>
                </div>
            </div>
        </main>
        <aside class="sidebar">
            <div>
                <div class="sidebar-header">
                    <h1>classic</h1>
                    <div class="header-icons">
                         <svg viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 7h2v5h-2zm0 6h2v2h-2z"/></svg>
                         <svg viewBox="0 0 24 24"><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69-.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61.22l2 3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"/></svg>
                         <svg viewBox="0 0 24 24"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6-6-6z"/></svg>
                    </div>
                </div>

                <div class="control-group">
                    <label for="tickerInput">Ticker</label>
                    <input type="text" id="tickerInput" value="SPX">
                </div>

                <div class="control-group date-buttons">
                    <button data-period="full">90d (agg)</button>
                    <button data-period="zero" class="active">latest (0DTE)</button>
                    <button data-period="one">next (1DTE)</button>
                </div>
                
                <div id="status">Carregando dados...</div>
                
                <div id="sidebar-info" style="display:none;">
                    <h3>Update</h3>
                    <div class="info-item"><span class="label">Date</span><span class="value" id="timestamp_date">-</span></div>
                    <div class="info-item"><span class="label">Time</span><span class="value" id="timestamp_time">-</span></div>
                    <div class="info-item"><span class="label">Spot</span><span class="value" id="spot_price">-</span></div>

                    <h3>Volume</h3>
                    <div class="info-item"><span class="label">Zero Gamma</span><span class="value" id="zero_gamma">-</span></div>
                    <div class="info-item"><span class="label">Major Positive</span><span class="value positive" id="mpos_oi">-</span></div>
                    <div class="info-item"><span class="label">Major Negative</span><span class="value negative" id="mneg_oi">-</span></div>
                    <div class="info-item"><span class="label">Net GEX</span><span class="value" id="net_gex_vol">-</span></div>
                    
                    <h3>Open Interest</h3>
                    <div class="info-item"><span class="label">Major Positive</span><span class="value positive" id="oi_mpos">-</span></div>
                    <div class="info-item"><span class="label">Major Negative</span><span class="value negative" id="oi_mneg">-</span></div>
                    <div class="info-item"><span class="label">Net GEX</span><span class="value" id="net_gex_oi">-</span></div>

                    <h3>Max Change GEX</h3>
                    <div id="maxChangeList"></div>
                </div>
            </div>
            <div class="sidebar-footer">
                <div class="playback-controls">
                    <svg viewBox="0 0 24 24"><path d="M19 12l-7-5.5v11l7-5.5zM5 6.5v11h2v-11H5z"/></svg>
                    <svg viewBox="0 0 24 24"><path d="M8 5v14l11-7L8 5z"/></svg>
                    <svg viewBox="0 0 24 24"><path d="M5 12l7 5.5V6.5L5 12zm14 0V6.5h-2v11h2V12z"/></svg>
                </div>
                 <span id="footer-time">4:00:00 PM</span>
            </div>
        </aside>
    </div>

    <script>
        const apiKey = "dGkuGvazaESI"; 

        // --- Elementos da pÃ¡gina ---
        const tickerInput = document.getElementById('tickerInput');
        const periodButtons = document.querySelector('.date-buttons');
        const statusEl = document.getElementById('status');
        const sidebarInfoEl = document.getElementById('sidebar-info');
        const chartsContainerEl = document.getElementById('charts-container');
        
        // --- VariÃ¡veis de estado ---
        let currentPeriod = 'zero';
        let myGexChart = null;
        
        // --- FunÃ§Ãµes Auxiliares ---
        function formatNumber(num, fractionDigits = 2) {
            if (typeof num !== 'number') return '-';
            return num.toLocaleString('pt-BR', { minimumFractionDigits: fractionDigits, maximumFractionDigits: fractionDigits });
        }
        function formatBillions(num) {
            if (typeof num !== 'number') return '-';
            const value = (num / 1_000_000_000);
            return `${value.toFixed(4)}Bn`;
        }
        function setStatus(message, isLoading = false) {
            statusEl.textContent = message;
            statusEl.style.display = 'block';
            if (isLoading) {
                sidebarInfoEl.style.display = 'none';
                chartsContainerEl.style.display = 'none';
            } else if (!message) {
                 statusEl.style.display = 'none';
                 sidebarInfoEl.style.display = 'block';
                 chartsContainerEl.style.display = 'block';
            }
        }
        
        /**
         * Cria uma URL de proxy usando um serviÃ§o robusto para contornar problemas de CORS.
         * @param {string} targetUrl A URL da API que se pretende aceder.
         * @returns {string} A URL completa do proxy.
         */
        function createProxiedUrl(targetUrl) {
            // CORREÃÃO: Usando o proxy api.codetabs.com/v1/proxy
            return `https://api.codetabs.com/v1/proxy/?quest=${targetUrl}`;
        }

        /**
         * Faz o fetch atravÃ©s do proxy e processa a resposta.
         * @param {string} proxiedUrl A URL do proxy jÃ¡ criada.
         * @returns {Promise<any>} Uma promessa que resolve com os dados JSON da API de destino.
         */
        async function fetchAndParseProxied(proxiedUrl) {
            const response = await fetch(proxiedUrl);
            if (!response.ok) {
                 throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);
            }
            return response.json();
        }


        // --- FunÃ§Ã£o Principal de LÃ³gica e API ---
        async function runUpdate() {
            const ticker = tickerInput.value;
            if (!ticker) {
                setStatus("Por favor, insira um ticker.", true);
                return;
            }
            setStatus(`Carregando dados para ${ticker.toUpperCase()}...`, true);

            const baseApiUrl = `https://api.gexbot.com/${ticker.toUpperCase()}/classic/${currentPeriod}`;
            const majorsUrl = createProxiedUrl(`${baseApiUrl}/majors?key=${apiKey}`);
            const maxChangeUrl = createProxiedUrl(`${baseApiUrl}/maxchange?key=${apiKey}`);
            const fullChainUrl = createProxiedUrl(`${baseApiUrl}?key=${apiKey}`);

            try {
                const [majorsData, maxChangeData, fullChainData] = await Promise.all([
                    fetchAndParseProxied(majorsUrl),
                    fetchAndParseProxied(maxChangeUrl),
                    fetchAndParseProxied(fullChainUrl)
                ]);
                
                updateSidebar(majorsData, maxChangeData);
                drawGexProfileChart(fullChainData, majorsData);
                
                setStatus(null);

            } catch (error) {
                console.error("Falha ao atualizar dados:", error);
                setStatus(`Erro ao carregar: ${error.message}.`, true);
            }
        }
        
        // --- FunÃ§Ãµes de AtualizaÃ§Ã£o da UI ---
        function updateSidebar(majors, maxChange) {
            const date = new Date(majors.timestamp * 1000); 
            document.getElementById('timestamp_date').textContent = date.toLocaleDateString('pt-BR');
            const timeString = date.toLocaleTimeString('pt-BR');
            document.getElementById('timestamp_time').textContent = timeString;
            document.getElementById('footer-time').textContent = timeString;

            document.getElementById('spot_price').textContent = formatNumber(majors.spot, 2);
            document.getElementById('zero_gamma').textContent = formatNumber(majors.zero_gamma, 2);
            document.getElementById('mpos_oi').textContent = formatNumber(majors.mpos_oi, 2);
            document.getElementById('mneg_oi').textContent = formatNumber(majors.mneg_oi, 2);
            document.getElementById('oi_mpos').textContent = formatNumber(majors.oi_mpos, 2);
            document.getElementById('oi_mneg').textContent = formatNumber(majors.oi_mneg, 2);

            const netGexVolEl = document.getElementById('net_gex_vol');
            netGexVolEl.textContent = formatNumber(majors.net_gex_vol, 4);
            netGexVolEl.className = `value ${majors.net_gex_vol > 0 ? 'positive' : 'negative'}`;
            
            const netGexOiEl = document.getElementById('net_gex_oi');
            netGexOiEl.textContent = formatNumber(majors.net_gex_oi, 4);
            netGexOiEl.className = `value ${majors.net_gex_oi > 0 ? 'positive' : 'negative'}`;

            const maxChangeListEl = document.getElementById("maxChangeList");
            maxChangeListEl.innerHTML = '';
            const intervals = {'one':'1 min', 'five':'5 min', 'ten':'10 min'};
            for(const key in intervals) {
                const data = maxChange[key];
                if(data) {
                    const valueClass = data[1] > 0 ? 'positive' : 'negative';
                    maxChangeListEl.innerHTML += `
                        <div class="info-item">
                            <span class="label">${intervals[key]}</span>
                            <span class="value">${formatNumber(data[0])} <span class="${valueClass}">${formatBillions(data[1])}</span></span>
                        </div>`;
                }
            }
        }

        // --- FunÃ§Ã£o do GrÃ¡fico ---
        function drawGexProfileChart(fullChainData, annotationValues) {
            if (myGexChart) myGexChart.destroy();
            const chartData = fullChainData.strikes.map(s => ({ x: s[1], y: s[0] }));
            const ctx = document.getElementById('gexChart').getContext('2d');
            myGexChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: chartData,
                        backgroundColor: (c) => c.raw.x >= 0 ? 'rgba(40, 167, 69, 0.7)' : 'rgba(220, 53, 69, 0.7)',
                        borderColor: (c) => c.raw.x >= 0 ? 'rgb(40, 167, 69)' : 'rgb(220, 53, 69)',
                        borderWidth: 1, barPercentage: 1.0, categoryPercentage: 1.0
                    }]
                },
                options: {
                    indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                    scales: {
                        x: { position: 'top', ticks: { color: '#FFFFFF', callback: (v) => `${(v/1e9).toFixed(3)}` }, grid: { color: 'rgba(255, 255, 255, 0.1)' } },
                        y: { type: 'linear', ticks: { color: '#FFFFFF', stepSize: 25 }, grid: { color: 'rgba(255, 255, 255, 0.1)' } }
                    },
                    plugins: {
                        legend: { display: false },
                        annotation: {
                            annotations: {
                                zero_gamma_line: { type: 'line', yMin: annotationValues.zero_gamma, yMax: annotationValues.zero_gamma, borderColor: '#f0b90b', borderWidth: 2, label: { content: `${formatNumber(annotationValues.zero_gamma)}`, enabled: true, position: 'end', backgroundColor: '#f0b90b', color: '#000', font: { weight: 'bold' } } },
                                mpos_oi_line: { type: 'line', yMin: annotationValues.mpos_oi, yMax: annotationValues.mpos_oi, borderColor: '#28a745', borderWidth: 2, borderDash: [6, 6], label: { content: `${formatNumber(annotationValues.mpos_oi)}`, enabled: true, position: 'start', backgroundColor: '#28a745', font: { weight: 'bold' } } },
                                mneg_oi_line: { type: 'line', yMin: annotationValues.mneg_oi, yMax: annotationValues.mneg_oi, borderColor: '#dc3545', borderWidth: 2, borderDash: [6, 6], label: { content: `${formatNumber(annotationValues.mneg_oi)}`, enabled: true, position: 'start', backgroundColor: '#dc3545', font: { weight: 'bold' } } },
                                spot_line: { type: 'line', yMin: annotationValues.spot, yMax: annotationValues.spot, borderColor: '#FFFFFF', borderWidth: 1.5 }
                            }
                        }
                    }
                }
            });
        }

        // --- Event Listeners ---
        periodButtons.addEventListener('click', (e) => {
            if (e.target.tagName === 'BUTTON' && !e.target.classList.contains('active')) {
                document.querySelector('.date-buttons button.active').classList.remove('active');
                e.target.classList.add('active');
                currentPeriod = e.target.dataset.period;
                runUpdate();
            }
        });
        tickerInput.addEventListener('change', runUpdate);
        
        // --- Carga Inicial ---
        window.addEventListener('load', runUpdate);
    </script>
</body>
</html>
